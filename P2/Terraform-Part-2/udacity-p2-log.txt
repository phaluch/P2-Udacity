
      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lambda_function.udacity_lambda will be created
  + resource "aws_lambda_function" "udacity_lambda" {
      + arn                            = (known after apply)
      + filename                       = "lambda_function_payload.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv"
      + runtime                        = "python3.7"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "Udacity-Lambda-Bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My Lambda Udacity Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + lambda_ouptut = "My output worked! This is it!"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...
aws_instance.udacity_lambda_ec2: Creating...
aws_lambda_function.udacity_lambda: Creating...
aws_instance.udacity_lambda_ec2: Still creating... [10s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [20s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [30s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [40s elapsed]
aws_instance.udacity_lambda_ec2: Creation complete after 41s [id=i-0b73e18c20e362c40]

Error: Unable to load "lambda_function_payload.zip": open lambda_function_payload.zip: The system cannot find the file specified.



Error: Error creating S3 bucket: InvalidBucketName: The specified bucket is not valid.
        status code: 400, request id: 99FD13EAC6B7B720, host id: 4/epGma9lnyEleuYaXUQkGg+gy+8kv/F8z9LUvZkV/yZz2RzzBRibym/OcZoR4n5+W9QPAtapBs=



C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply
aws_instance.udacity_lambda_ec2: Refreshing state... [id=i-0b73e18c20e362c40]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_lambda_function.udacity_lambda will be created
  + resource "aws_lambda_function" "udacity_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.py"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv"
      + runtime                        = "python3.7"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "Udacity-Lambda-Bucket-Name-2"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My Lambda Udacity Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...
aws_lambda_function.udacity_lambda: Creating...

Error: error creating Lambda Function: InvalidParameterValueException: Could not unzip uploaded file. Please check your file, then try to upload again.
{
  RespMetadata: {
    StatusCode: 400,
    RequestID: "5d714310-b2db-478f-be7a-20160a2202d1"
  },
  Message_: "Could not unzip uploaded file. Please check your file, then try to upload again.",
  Type: "User"
}



Error: Error creating S3 bucket: InvalidBucketName: The specified bucket is not valid.
        status code: 400, request id: 877472CEF20A26AC, host id: 3Hj4jpJwaGeqZn9Oee5lcm5wCw+pyPbI/qGhtKQzOABMVJ4Lv2FZu0b/0cjUGzliZqgIysDYfCk=



C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply
aws_instance.udacity_lambda_ec2: Refreshing state... [id=i-0b73e18c20e362c40]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_lambda_function.udacity_lambda will be created
  + resource "aws_lambda_function" "udacity_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv"
      + runtime                        = "python3.7"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "Udacity-Lambda-Bucket-Name-2"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My Lambda Udacity Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...
aws_lambda_function.udacity_lambda: Creating...
aws_lambda_function.udacity_lambda: Creation complete after 10s [id=greet_lambda]

Error: Error creating S3 bucket: InvalidBucketName: The specified bucket is not valid.
        status code: 400, request id: AK2QCYAGBX1YFJ3Y, host id: 5uh9mk872JoDRCB2kWwufw19gHbGEL0SNWxwbv7C9da5DGsVTZULHewQlYvkDJe/EZnJN3bD38Y=



C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply
aws_lambda_function.udacity_lambda: Refreshing state... [id=greet_lambda]
aws_instance.udacity_lambda_ec2: Refreshing state... [id=i-0b73e18c20e362c40]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "udacity_lambda_bucket_name"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My Lambda Udacity Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...

Error: Error creating S3 bucket: InvalidBucketName: The specified bucket is not valid.
        status code: 400, request id: 3N8ZERAKFQDRDQ1T, host id: j6aBFV4RaboImLVEDN3AR3hOtVPd25AZflUPzCWkk4rRDkC1YU612n+6qYjidlRwvbGiyDmw+m4=



C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply
aws_lambda_function.udacity_lambda: Refreshing state... [id=greet_lambda]
aws_instance.udacity_lambda_ec2: Refreshing state... [id=i-0b73e18c20e362c40]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "udacity_lambda_bucket_name"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My-Lambda-Udacity-Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...

Error: Error creating S3 bucket: InvalidBucketName: The specified bucket is not valid.
        status code: 400, request id: 451BF5C53E642826, host id: OC0opyi17uGuBnjlmI9BQ0s1B4Mdk0HZQeAkfT9d2sIP63KGxwI0hGhIp6uHsLiL29NZgzoeuc4=



C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply
aws_lambda_function.udacity_lambda: Refreshing state... [id=greet_lambda]
aws_instance.udacity_lambda_ec2: Refreshing state... [id=i-0b73e18c20e362c40]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "my-udacity-lambda-bucket-name"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My-Lambda-Udacity-Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...
aws_s3_bucket.udacity_lambda_bucket: Still creating... [10s elapsed]
aws_s3_bucket.udacity_lambda_bucket: Creation complete after 14s [id=my-udacity-lambda-bucket-name]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

lambda_ouptut = "My output worked! This is it!"

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform state list
data.aws_vpc.my_vpc
aws_instance.udacity_lambda_ec2
aws_lambda_function.udacity_lambda
aws_s3_bucket.udacity_lambda_bucket

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform state show
Exactly one argument expected.

Usage: terraform state show [options] ADDRESS

  Shows the attributes of a resource in the Terraform state.

  This command shows the attributes of a single resource in the Terraform
  state. The address argument must be used to specify a single resource.
  You can view the list of available resources with "terraform state list".

Options:

  -state=statefile    Path to a Terraform state file to use to look
                      up Terraform-managed resources. By default it will
                      use the state "terraform.tfstate" if it exists.

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform state show aws_s3_bucket.udacity_lambda_bucket
# aws_s3_bucket.udacity_lambda_bucket:
resource "aws_s3_bucket" "udacity_lambda_bucket" {
    acl                         = "private"
    arn                         = "arn:aws:s3:::my-udacity-lambda-bucket-name"
    bucket                      = "my-udacity-lambda-bucket-name"
    bucket_domain_name          = "my-udacity-lambda-bucket-name.s3.amazonaws.com"
    bucket_regional_domain_name = "my-udacity-lambda-bucket-name.s3.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z3AQBSTGFYJSTF"
    id                          = "my-udacity-lambda-bucket-name"
    region                      = "us-east-1"
    request_payer               = "BucketOwner"
    tags                        = {
        "Name" = "My-Lambda-Udacity-Bucket"
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform state show aws_lambda_function.udacity_lambda
# aws_lambda_function.udacity_lambda:
resource "aws_lambda_function" "udacity_lambda" {
    arn                            = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda"
    filename                       = "greet_lambda.zip"
    function_name                  = "greet_lambda"
    handler                        = "greet_lambda.lambda_handler"
    id                             = "greet_lambda"
    invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:674259266005:function:greet_lambda/invocations"
    last_modified                  = "2020-12-14T00:20:28.771+0000"
    layers                         = []
    memory_size                    = 128
    package_type                   = "Zip"
    publish                        = false
    qualified_arn                  = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda:$LATEST"
    reserved_concurrent_executions = -1
    role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv"
    runtime                        = "python3.7"
    source_code_hash               = "J9Jv7qL6LjVdpmLCBq2ccTmKXSpkkuVvy8iujVLMpWg="
    source_code_size               = 267
    tags                           = {}
    timeout                        = 3
    version                        = "$LATEST"

    tracing_config {
        mode = "PassThrough"
    }
}

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform destrou
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output, or the help for a specified subcommand.
  -version      An alias for the "version" subcommand.

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform destroy

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.udacity_lambda_ec2 will be destroyed
  - resource "aws_instance" "udacity_lambda_ec2" {
      - ami                          = "ami-04d29b6f966df1537" -> null
      - arn                          = "arn:aws:ec2:us-east-1:674259266005:instance/i-0b73e18c20e362c40" -> null
      - associate_public_ip_address  = true -> null
      - availability_zone            = "us-east-1a" -> null
      - cpu_core_count               = 1 -> null
      - cpu_threads_per_core         = 1 -> null
      - disable_api_termination      = false -> null
      - ebs_optimized                = false -> null
      - get_password_data            = false -> null
      - hibernation                  = false -> null
      - id                           = "i-0b73e18c20e362c40" -> null
      - instance_state               = "running" -> null
      - instance_type                = "t2.micro" -> null
      - ipv6_address_count           = 0 -> null
      - ipv6_addresses               = [] -> null
      - monitoring                   = false -> null
      - primary_network_interface_id = "eni-04138ed0ddc3760ce" -> null
      - private_dns                  = "ip-172-31-27-36.ec2.internal" -> null
      - private_ip                   = "172.31.27.36" -> null
      - public_dns                   = "ec2-18-209-23-2.compute-1.amazonaws.com" -> null
      - public_ip                    = "18.209.23.2" -> null
      - secondary_private_ips        = [] -> null
      - security_groups              = [
          - "default",
        ] -> null
      - source_dest_check            = true -> null
      - subnet_id                    = "subnet-984d0ed5" -> null
      - tags                         = {
          - "Name" = "Udacity Lambda EC2"
        } -> null
      - tenancy                      = "default" -> null
      - volume_tags                  = {} -> null
      - vpc_security_group_ids       = [
          - "sg-67249857",
        ] -> null

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - volume_id             = "vol-065ab0230f934a187" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_lambda_function.udacity_lambda will be destroyed
  - resource "aws_lambda_function" "udacity_lambda" {
      - arn                            = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda" -> null
      - filename                       = "greet_lambda.zip" -> null
      - function_name                  = "greet_lambda" -> null
      - handler                        = "greet_lambda.lambda_handler" -> null
      - id                             = "greet_lambda" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:674259266005:function:greet_lambda/invocations" -> null
      - last_modified                  = "2020-12-14T00:20:28.771+0000" -> null
      - layers                         = [] -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv" -> null
      - runtime                        = "python3.7" -> null
      - source_code_hash               = "J9Jv7qL6LjVdpmLCBq2ccTmKXSpkkuVvy8iujVLMpWg=" -> null
      - source_code_size               = 267 -> null
      - tags                           = {} -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be destroyed
  - resource "aws_s3_bucket" "udacity_lambda_bucket" {
      - acl                         = "private" -> null
      - arn                         = "arn:aws:s3:::my-udacity-lambda-bucket-name" -> null
      - bucket                      = "my-udacity-lambda-bucket-name" -> null
      - bucket_domain_name          = "my-udacity-lambda-bucket-name.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "my-udacity-lambda-bucket-name.s3.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "my-udacity-lambda-bucket-name" -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "Name" = "My-Lambda-Udacity-Bucket"
        } -> null

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Changes to Outputs:
  - lambda_ouptut = "My output worked! This is it!" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_lambda_function.udacity_lambda: Destroying... [id=greet_lambda]
aws_instance.udacity_lambda_ec2: Destroying... [id=i-0b73e18c20e362c40]
aws_s3_bucket.udacity_lambda_bucket: Destroying... [id=my-udacity-lambda-bucket-name]
aws_lambda_function.udacity_lambda: Destruction complete after 1s
aws_s3_bucket.udacity_lambda_bucket: Destruction complete after 1s
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-0b73e18c20e362c40, 10s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-0b73e18c20e362c40, 20s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-0b73e18c20e362c40, 30s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-0b73e18c20e362c40, 40s elapsed]
aws_instance.udacity_lambda_ec2: Destruction complete after 44s

Destroy complete! Resources: 3 destroyed.

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.udacity_lambda_ec2 will be created
  + resource "aws_instance" "udacity_lambda_ec2" {
      + ami                          = "ami-04d29b6f966df1537"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + secondary_private_ips        = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "subnet-984d0ed5"
      + tags                         = {
          + "Name" = "Udacity Lambda EC2"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = [
          + "sg-67249857",
        ]

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lambda_function.udacity_lambda will be created
  + resource "aws_lambda_function" "udacity_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv"
      + runtime                        = "python3.7"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be created
  + resource "aws_s3_bucket" "udacity_lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = "private"
      + arn                         = (known after apply)
      + bucket                      = "my-udacity-lambda-bucket-name"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "My-Lambda-Udacity-Bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + lambda_ouptut = "My output worked! This is it!"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.udacity_lambda_bucket: Creating...
aws_instance.udacity_lambda_ec2: Creating...
aws_lambda_function.udacity_lambda: Creating...
aws_lambda_function.udacity_lambda: Creation complete after 9s [id=greet_lambda]
aws_s3_bucket.udacity_lambda_bucket: Still creating... [10s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [10s elapsed]
aws_s3_bucket.udacity_lambda_bucket: Creation complete after 13s [id=my-udacity-lambda-bucket-name]
aws_instance.udacity_lambda_ec2: Still creating... [20s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [30s elapsed]
aws_instance.udacity_lambda_ec2: Still creating... [40s elapsed]
aws_instance.udacity_lambda_ec2: Creation complete after 41s [id=i-00a1b9300b867f649]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

lambda_ouptut = "My output worked! This is it!"

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform destoy
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output, or the help for a specified subcommand.
  -version      An alias for the "version" subcommand.

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>terraform destroy

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.udacity_lambda_ec2 will be destroyed
  - resource "aws_instance" "udacity_lambda_ec2" {
      - ami                          = "ami-04d29b6f966df1537" -> null
      - arn                          = "arn:aws:ec2:us-east-1:674259266005:instance/i-00a1b9300b867f649" -> null
      - associate_public_ip_address  = true -> null
      - availability_zone            = "us-east-1a" -> null
      - cpu_core_count               = 1 -> null
      - cpu_threads_per_core         = 1 -> null
      - disable_api_termination      = false -> null
      - ebs_optimized                = false -> null
      - get_password_data            = false -> null
      - hibernation                  = false -> null
      - id                           = "i-00a1b9300b867f649" -> null
      - instance_state               = "running" -> null
      - instance_type                = "t2.micro" -> null
      - ipv6_address_count           = 0 -> null
      - ipv6_addresses               = [] -> null
      - monitoring                   = false -> null
      - primary_network_interface_id = "eni-08bcacebfed9ea155" -> null
      - private_dns                  = "ip-172-31-29-115.ec2.internal" -> null
      - private_ip                   = "172.31.29.115" -> null
      - public_dns                   = "ec2-52-23-224-205.compute-1.amazonaws.com" -> null
      - public_ip                    = "52.23.224.205" -> null
      - secondary_private_ips        = [] -> null
      - security_groups              = [
          - "default",
        ] -> null
      - source_dest_check            = true -> null
      - subnet_id                    = "subnet-984d0ed5" -> null
      - tags                         = {
          - "Name" = "Udacity Lambda EC2"
        } -> null
      - tenancy                      = "default" -> null
      - volume_tags                  = {} -> null
      - vpc_security_group_ids       = [
          - "sg-67249857",
        ] -> null

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - volume_id             = "vol-0a5e0195b8d7d3841" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_lambda_function.udacity_lambda will be destroyed
  - resource "aws_lambda_function" "udacity_lambda" {
      - arn                            = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda" -> null
      - filename                       = "greet_lambda.zip" -> null
      - function_name                  = "greet_lambda" -> null
      - handler                        = "greet_lambda.lambda_handler" -> null
      - id                             = "greet_lambda" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:674259266005:function:greet_lambda/invocations" -> null
      - last_modified                  = "2020-12-14T00:39:04.959+0000" -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-east-1:674259266005:function:greet_lambda:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::674259266005:role/service-role/udacity-lambda-role-ufswzpbv" -> null
      - runtime                        = "python3.7" -> null
      - source_code_hash               = "J9Jv7qL6LjVdpmLCBq2ccTmKXSpkkuVvy8iujVLMpWg=" -> null
      - source_code_size               = 267 -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

  # aws_s3_bucket.udacity_lambda_bucket will be destroyed
  - resource "aws_s3_bucket" "udacity_lambda_bucket" {
      - acl                         = "private" -> null
      - arn                         = "arn:aws:s3:::my-udacity-lambda-bucket-name" -> null
      - bucket                      = "my-udacity-lambda-bucket-name" -> null
      - bucket_domain_name          = "my-udacity-lambda-bucket-name.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "my-udacity-lambda-bucket-name.s3.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z3AQBSTGFYJSTF" -> null
      - id                          = "my-udacity-lambda-bucket-name" -> null
      - region                      = "us-east-1" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "Name" = "My-Lambda-Udacity-Bucket"
        } -> null

      - versioning {
          - enabled    = false -> null
          - mfa_delete = false -> null
        }
    }

Plan: 0 to add, 0 to change, 3 to destroy.

Changes to Outputs:
  - lambda_ouptut = "My output worked! This is it!" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_lambda_function.udacity_lambda: Destroying... [id=greet_lambda]
aws_s3_bucket.udacity_lambda_bucket: Destroying... [id=my-udacity-lambda-bucket-name]
aws_instance.udacity_lambda_ec2: Destroying... [id=i-00a1b9300b867f649]
aws_lambda_function.udacity_lambda: Destruction complete after 1s
aws_s3_bucket.udacity_lambda_bucket: Destruction complete after 1s
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-00a1b9300b867f649, 10s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-00a1b9300b867f649, 20s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-00a1b9300b867f649, 30s elapsed]
aws_instance.udacity_lambda_ec2: Still destroying... [id=i-00a1b9300b867f649, 40s elapsed]
aws_instance.udacity_lambda_ec2: Destruction complete after 44s

Destroy complete! Resources: 3 destroyed.

C:\Users\pedro\PycharmProjects\Udacity\P2\Terraform-Part-2>